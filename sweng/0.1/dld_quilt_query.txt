quilt 0.1 quilt_query design
----------------------------
Module: quilt_query

Type: Executable Script

External Dependencies:
    python-argparse

Internal Dependencies:
    quilt_core

Responsibilities:
    Issue source queries from a partial querySpec, wait for the results,
    do semantic processing on the results, publish results to the 
    QueryMaster

Prototypes:
    sorted.py

Classes:
    class QuiltQuery : QuiltMasterClient

        __init__(
            args    # see functional_specification of query_queue
        )
            # store args as member variable
            # chain to super constructor

         OnRegisterEnd()
            """
            Retrive the querySpec from the query master and issue the
            srcQueries to the source
            """

            # try the following, send error to query master if it occrs

                # use query id passed in arguments

                # get the query spec from query master
                #   check that the state is INITIALIZED
                #   set the state to ACTIVE
                #   by calling BeginQuery
                
                # store pattern and  query as data memebers

                # iterate the sourceQuerySpec's in srcQueries list by source
                    # get proxy to the source master
                    # mark the sourceQuery ACTIVE
                    # query the source by sending it the source query specs as
                    # Note: no locking needed 
                    #   asyncronous call, and returnign messages not processe until
                    #   this funciton exits
                
                # return True so event loop starts running

        OnSourceQueryError( srcQueryId, exception)
            # log the source's exception
            # lock self
                # mark source query state with ERROR
            # call query Master
            #   OnQueryError

            # stop processing events

        AppendSourceQueryResults( 
            string srcQueryId   # id for the source query
            sourceResults       # results of the source Query)
            """
            Called by sourceManager to push results back after running
            a source query.
            """


            # acquire lock
                # if srcQueryId are not yet in 
                #   the results dictionary, add their keys in

                # try to get any previous results at this key

                NOTE:  For future optimization, seperate sorted lists for
                pieces of results can be maintained until complete query,
                and then the merge can be performed
                Merge new results, using python standard merge function
                http://stackoverflow.com/questions/464342/combining-two-sorted-lists-in-python

                # append the sourceResults at this key
                


        CompleteSourceQuery(
            string srcQueryId   # id for the source query)
            """
            Called by sourceManager when it is done processing the query
            """


            NOTE:
                Because the member data query specs are not entries are not
                modified (Except during intialization) we do not have to lock
                before reading from the list.  Also we assume no results
                should be appended after a call to complete query so that we
                can sort the list of data outside of a lock.  Also see note 
                in AppendSourceQueryResults which could change the logic here

            # get the source query from the member data collection of src 
            #   queries using the srcQueryId

            # if src query specifies that source returns out of order results
               # sort results  by timestamp using interpret's 'at' function, see
               #   prototype 'sorted.py'

            # acquire lock
                # throw exception if source query is not in active
                # set srcQuerie's state to COMPLETED
                # Detect if all src queries are completed


            # if this was the last source query, 
                # get proxy to self
                # asyncronously call self's CompleteQuery


        self.SetProcesssEvents( bool value)
            # lock the class clock
# set _processEvents to the specified value

        void OnEventLoopBegin()
            # lock the class lock
            # read and return value of _processEvents

        void OnEventLoopEnd()
            # lock the class lock
            # read and return value of _processEvents


        void CompleteQuery
            # try the following
                # lock self
                # if there is no query code
                    # for each source result
                        # append source results to query master
                # else
                    # evaluate the query by calling quilt_interpret
                    #   pass the query spec, and source Results
                    # append the returned results to the query master's
                    #   results for this query
                # call query masters CompleteQuery
            # catch exceptions
                # log out the exceptions, 
                # Call query master's OnQueryError
            # finally
                # stop processing events
            


Functions:

    # main function of the script, which is passed command line variables
    def main(argc,argv)
        # setup argument parser in accordance with funcitonal specification
        # parse the arguments, exit with error message if unparseable
        # create the quilt query object
        # call query_master_client_main_helper






