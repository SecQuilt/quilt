quilt 0.1 quilt_core design
-----------------------------

Module: quilt_core

Type: Library

External Dependencies:
    python-configparser
    python-pyro
    python-lockfile

Responsibilities:
    utility functions common to all quilt modules

Prototype: cfgproto.py

Classes:

    # responsible for common daemon functionality
    class QuiltDaemon:
        setup_process(name)
            # perform common daemon setup stuff
            # set stdin, stdout, stderr to /dev/null
            # if arguments are specfied, and arguments have pid file
                # set pid file name to value from command line
            # otherwise generate a pid file path
                # get the path to this python file
                # convert all of the '/' to '_'
                # append '.pid'
                # preppend '/tmp'

            # set the pid file path and the pid timeout


        main(self)
            # Create daemon runner, which helps daemonize

            # setup loggging for the daemon
            # get the currently configured logger
            # if daemon has arguments and has log file
                # create a logging file handler
                # add the logging file handler to the logger
                # initialze the context of the daemon runner with the logger's
                #   file handler
            # otherwise
                # add a syslog log handler to the logger

            # run the daemon

            # capture common exceptions and provide helpful error msg

    # Responsible for access to quilt configuration
    class QuiltConfig():
        
        ###########
        # Constants
        ###########

        # The name of the environment variable that defines the location
        # of the quilt config directory.  This will be the filesystem path to a 
        # directory containing a quilt.cfg file.  ALso it may have a smd.d 
        # subdirectory where sourcemaster configurations may be
        QUILT_CFG_DIR_VAR='QUILT_CFG_DIR'

        ############
        # Operations
        ############
        
        # Constructor, reads the configuration 
        def __init__():
            # default configuration location to /etc/quilt
            # if QUILT_CFG_DIR_VAR set, set location off of that value
            # if config file exists at location, read it in
        
        # Access a configuration value.  Configuraiton values can be
        # specified with a section and a name.  The configuration value is
        # returned.  If the specified value is not present the passed in
        # default is returned.  If no return type is supplied the generic type
        # passed through from the config parser is used
        def GetValue(        # [out] string
            self,
            sectionName,     # [in] string, name of section
            valueName,       # [in] string, name of value
            default,         # [in] string, value of default
            retType=None)    # [in] type, returned type of value

            # perform casting logic
            # get the variable from config in the generic type,
            # if value is not present return None
            # Otherwise convert to the return type and return

        # iterate through the source managers defined in the configuration
        # these will be the files inside of $QUILT_CFG/smd.d
        def GetSourceManagers(  # [out] list of all defined source managers
            self)

            # call GetSourceManagersUtil helper function to get names

        def GetSourceManagersUtil(
            string which    # string defining which mode this method operates
                            #   in [names,specs] 
            """
            Returns either a list of names of source managers, or returns a
            list of source specs for configuration managers
            """

            # git the directory containg discoverable source manager files
            # from the config object in member data

            # expand environment variables in the directory path

            # log warning if the specified directory does not exist

            # list the files in the directory and store them in a list

            # initialize a cllection to an empty list or an empty src specs

            # itterate the list of config files
                # create a new config parser and read the current config file
                # itterate the sections in the file
                    # if which decides we are returning names
                        # append the current section to the returning list
                    # otherwise
                        # get the content of source spec as string from the
                        #   value of "sourceSpec" in the current section

                        # call function that converts a user specified source
                        #   spec into an actual source spec object

                        # add created source spec object to the returning list




        def GetSourceManagerSpecs(  # [out] dict of source manager names mapped
                                   #    to dictionary of source manager's
                                   #    configuration data
            # call GetSourceManagersUtil helper function to get specs
            


    class QueryMasterClient 

        
        Note: To avoid having to deal with theading and locking, all
            methods are considered locked, we are using SynchronizedObjBase
            
        # create a lock for this class, coarse grained but
        # proably good enough.
        self._lock = threading.lock()


        # Connect to the query master
        void RegisterWithQueryMaster():
            # Access the QueryMaster's registrar's host and port from the config
            # access the Query Master's instance name, create a proxy to it
            # store a reference to the query master as a member variable
            # register the client with the query master
            # record the name the master assigned us as a member variable
        
        # funciton called when registration of this client is complete.
        # Intended for optional overriding by the implementing client.
        # called in main thread before event loop begins
        # return false to prevent event loop from running
        bool OnRegisterEnd()
            # return true

        # funciton called once when client's first event loop occurs
        # function called in event loop main thread
        # return False to end participation in event loop
        bool OnFirstEventLoop()
            # return true

        # funciton called when client's owning daemon begins an event loop
        # iteration, function called in event loop main thread
        # return False to end participation in event loop
        bool OnEventLoopBegin()
            # return true

        # funciton called when client's owning daemon ends an event loop
        # iteration, function called in event loop main thread
        # return False to end participation in event loop
        bool OnEventLoopEnd()
            # return true

        # Unregister from the query Master
        void UnregisterFromQueryMaster()
            # call query master's unregister function

        # Constructor
        void __init__( basename )
            # set a local name based off the base name that will be 
            # unique for this machine

        def GetType()
            # return the type id of this class

        string GetRegisteredName()
            # return the name the query manager assigned to this client

        def GetConfig()
            # if config data is not stored in this client's member data
                # initialize a config and store it as member data

        def GetQueryMasterProxy()
            NOTE: In resolution of ISSUE012, it was found that if two
            processes called "Pyro4.locateNS" at nearly the same time, 
            that a lockup would occur.  The work around for now is to
            stash the Query Master's URI, and re use it, rather than
            recalculate it each time.  This may still cause problems
            if multiple processes start at the same time.

            # if query master uri is not set
                # call GetConfig to get configuration
                # lock self
                    # if query master uri is still not set
                        # use configuration to look up the nameserver
                        #   (registrar) for the query master
                        # use the query master's name from the config
                        #   to get the query master uri from the name server
                        # store the query master uri in member data
            # return a proxy to the query master using uri



Functions:

    def GetQueryMasterProxy(config=None)
        """Access configuration to find query master, 
        return proxy to it
        """
        NOTE: See ISSUE012

        # in a globally thread safe way, initialize a proxy to the query master
        #   if config is none, intitalize config
        #   look up name, and name server info for query master

        # return global pyro proxy

    # Quilt helper function for main, do common things
    def main_helper(
        description                 # prose description of functionality
        argv                        # input arguments
        )
        # create a new argument parser 
        # setup specificaiton for logging parameter
        # setup specification for the logging file
        # attempt to read logging parameter from argv
        # pass parsed arguments to quilt_core for common initialization
        # return the argument parser


    def daemon_main_helper(description, argv)
        """
        common initialization for daemon processes
        @description the description of the process shown when accessing the
        cmd line help for the process
        @argv the cmd line arguments for the process, starting with the first
        argument
        """
        # get parser by calling the regular main helper
        # add specification of the start, stop, and restart actions
        # add specification of the pid file
        # parse the comd line arguments with the parser
        # return the parsed arguments


    # Used to publish the client as a remote object, and complete the
    #   connection with the query master

    Prototype: daemon_server.py

    static query_master_client_main_helper(
            clientObjectDic        # map of instances to names of objects to
                                   # host as pyro objects)
        # Use QuiltConfig to read in configuration 
        # access the registrar's host and port number from config
        # iterate the names and objects in clientObjectDic
            # register the clientObject with the local PyRo Daemon with 
            # use the key name as the object name        
            # call the RegisterWithQueryMaster to complete registration

        # iterate the names and objects in clientObjectDic
            # call OnRegisterEnd(), keep track of objects that
            #   desire to have the event loop (who return true)
            #   Unregister objects that are opting out
            #   replace clientObjectDic with participating objects

        # do a daemon event loop, 

        # while clientObjectDic has elements in it
            On very first iteration of loop
                # initialized a removedClientDic
                # iterate the names and objects in clientObjectDic
                    # call OnFirstEventLoop() if False is returned
                        # remove object from clientObjectDic
                        # place object in removedClientDic
                        # UnRegisterClient from Query Master

                # if all objects have been removed break out

            # initialized a removedClientDic
            # iterate the names and objects in clientObjectDic
                # call OnEventLoopBegin() if False is returned
                    # remove object from clientObjectDic
                    # place object in removedClientDic
                    # UnRegisterClient from Query Master

            # if all objects have been removed break out

            # TODO: Maintain contract, do not process events
            #   for object that declared they wanted to be
            #   removed by returning false.  For now it does
            #   not matter because we only ever have one object
            #   in the list
          
            # select daemon sockets, with a fraction of a second timeout
            # if there are daemon sockets
                # run the events for those sockets
            # otherwise
                # sleep for fraction of a second

            # iterate the names and objects in clientObjectDic
                # call OnEventLoopEnd() if False is returned
                    # remove object from clientObjectDic
                    # place object in removedClientDic
                    # UnRegisterClient from Query Master

            # if all objects have been removed break out
        # close the daemon

        Notes:
            We provide virtual functions and interpret their returns so
            clients can customize how they want to behave.  Some objects may
            not ever need callbacks from the query master and may not even
            start an event loop.
            
            TODO hardening:
            The clients are not hardened to unregister themselves when
            exceptions are thrown at this time. 

    
    def common_init(
        name                # name of program
        args                # the parsed arguments from the command line
                            # specification desctription)
    """Common site for logging configuration, always call as first function
from main and other initializeation"""
    #call logging basicConfig 

    Notes:
        This functionality will grow as needed, but have common site for
        logging config here

    # Set logging level, logging file, logging format
    # Set pyro's HMAC key

        
    #REVIEW (ISSUE008)
    def ui_show(outputMsg)
        """
        Show the output message
        """
        chain call to quilt_ui.show

    #REVIEW (ISSUE008)
    def ui_tell()
        """
        Get input message from the user
        """
        chain return from quilt_ui.inputMsg

        
    def exception_to_string(error)
        """
        Display a stirng with information about an exeception
        """

    def get_uri(registrarHost, registrarPort, objName)
        """
        Get a string that specifies the absolute location of an object
        """
        NOTE: See ISSUE012

        # use a global mutex lock
        # acquire the lock

        # use a lockfile
        # acquire the file lock
        
            # locate the nameserver at given host and port
            # lookupt the URI for the given object name
            # return the uri

        def debug_obj (obj, prefix)
            # log out debug information about an object


Schema:

    Main Config File
    ----------------

    # Configuration file has the following defined sections values and
    # defaults, all pyro objects hosted on this machine will use this
    # registrar

    [registrar]
    port : None           # port used by nameserver 'name' default is random
    host : None           # host used by nameserver default is localhost

    # the location of the query master.  This section is for the client's
    # to be able to find the query master.  The query master machine does
    # not use this section for registrat informaiton, it will be 
    # regestered at location specified in [registrar] section with the
    # name specified in this section.
    [query_master]
    registrar_host : None      # hostname of the registrar default is
                             # localhost
    registrar_port : None      # port of the registrar default search for
                             # registrar port (could be wrong if multiple
                             # pyro nameservers on system)
    name : 'query_master'    # name for of the query master instance

    [source_managers]
    config_dir  : '$QUILT_CFG/smd.d'    # directory containing smd configs

    [testing]
    includes    :   ['*_testcase.py']    # file globs to run as testing 
                                         # scripts (no pathing
                                #     needed assumed to be in test lib dir)
                                #     like ['*TestSuite1*', *TestSuite2* ] 
    sleep       :   0     # seconds to sleep before repeating test
                          # 0 or less means do not repeat tests
                        
    Soure Manager Config File
    -------------------------

    [NAME]      # the name of the source manager
    sourceSpec         :   {    # source spec dict provides everything to know
                                # about a source's interface
        sourcePatterns : {      # sourcPatterns are templates for sourceQueries
            "name" : {          # name of the pattern
            "ordered" : True    # if not present ordered will assume to be
                                #   true
    NOTE:
        I do not want to detail this much further because it is rapidly
        changing   
    
        } } }
