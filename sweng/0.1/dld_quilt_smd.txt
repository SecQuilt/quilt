quilt 0.1 source manager daemon design
--------------------------------------
    
Module: quilt_smd

Type: Daemon process
        
Internal Dependencies:
    quilt_core
    quilt_source_query
    sei_core

External Dependenies:
    python-pyro(4)
    python-daemon

Prototype:
    seiscripts: install_config.py

Responsibilities:
    behave like a good Daemon process
    run a PyRo daemon to host SourceMaster as a remote object 

Classes:

    class SourceManager : QueryMasterClient

        def __init__(string sourceName, dict sourceSpec)
            # use name to init base class
            # store sourceSpec as a member
            
        def Query(string queryId, dict sourceQuerySpec)
    
            # ALWAYS catch errors, report them to the query master
            #   calling OnSourceQueryError()           
 
            # lock self
                # set last query member to queryId

            # get the sourcePatternSpec from the pattern name in the
            #   sourceQuerySpec

            # create cmd line for grep
            # use the template in the sourcePatternSpec, and use the values
            #   provided for the variables
            #   use string.Template as per install_config.py example

            # use run_process to execute grep, give callback per line
            #   processing function

            # Set query result events list in query master using query id
        
        def OnGrepLine(string line)


            # assemble a pytho dict string for an object representing an event
            # based on eventSpec and eventSpec meta data
            # convert that string to a python event spec
            # append event to list of events member
           
             
        

        def GetLastQuery()  # returns the last query string
    
        def GetType(self):
            return "SourceManager"

        #   def OnRegisterEnd()
        #       """After basic client registration completes, source manager
        #       initiates the source pattern registration"""

        def GetSourcePatterns()
            """Returns a list of defined source patterns"""
            # non need to lock because noone shuld be writing to a source spec
            # after init

            # iterate sourceSpec member's patterns
            # append returning list with pattern names

        def GetSourcePattern(patternName)
            """return the specified patternSpec dict"""
            

            # non need to lock because noone shuld be writing to a source spec
            # after init

            # access the source pattern spec with the specified key in the
            # sourceSpec, return a copy


    class Smd : QuiltDaemon
    
    def __init__(args)
        # call base class'es init
        # call setup_process
        # store prased args as member variable

    def run:
    
        # parse the arguments, exit with error message if unparseable
        # Create Instance of QuiltConfig
        # call GetSourceManagerSpecs and iterate through them
        #   Create the Source Manager objects, pass them the spec
        #   store them in a dictionary
        # call util function query_master_client_main_helper

        NOTE:
            We can add the actual daemon (Smd) to the remote object list
            This will allow query master to do things at the source
            manager collection level.  We don't have the use case yet
            when we do, redesign a bit

Functions:

    def main():
        # call the quilt core main helper
        # setup argument parser in accordance with funcitonal specification

           
