quilt 0.1 source manager daemon design
--------------------------------------
    
Module: quilt_smd

Type: Daemon process
        
Internal Dependencies:
    quilt_core

External Dependenies:
    python-pyro(4)
    python-daemon

Responsibilities:
    behave like a good Daemon process
    run a PyRo daemon to host SourceMaster as a remote object 

Classes:

    class SourceManager : QueryMasterClient

        def Query(string queryId, string query)
            # print out the source manager's name and the query string
            # Store query in member variable

        
        def GetLastQuery()  # returns the last query string
    
        def GetType(self):
            return "SourceManager"

    class Smd : QuiltDaemon
    
    def __init__(args)
        # call base class'es init
        # call setup_process
        # store prased args as member variable

    def run:
    
        # parse the arguments, exit with error message if unparseable
        # Create Instance of QuiltConfig
        # call GetSourceManagers and iterate through them
        #   Create the Source Manager objects
        #   store them in a dictionary
        # call util function query_master_client_main_helper

        NOTE:
            We can add the actual daemon (Smd) to the remote object list
            This will allow query master to do things at the source
            manager collection level.  We don't have the use case yet
            when we do, redesign a bit

Functions:

    def main():
        # call the quilt core main helper
        # setup argument parser in accordance with funcitonal specification

           
