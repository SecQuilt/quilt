quilt 0.1 quilt_interpret design
--------------------------------


Module: quilt_interpret

Type: Library

External Dependencies:
    ast, heapq, string.Template

Internal Dependencies:

Prototype:
    protoeval.py, iteration.py

Responsibilities:
    Manage the interpretation of quilt pattern code

Notes:
    This module uses global scope, and should not be used in a multithreaded
    way.  Only evaluate_query should be called publically

Classes:

    class _rec:
        def __init__(self, eventsId, fieldName, index):
            # set member variables for eventsId, field and index

        def GetRec(self):
            """
            retrieve the wrapped record
            """
            # get the event list from the global event dict with this eventsId
            # get the index'd event
            # return the value keyed by fieldName from the event

        def __str__(self):
            """
            return wrapped record string
            """

    class _field:
        def __init__(self, eventsId, fieldName)      
            # set id and field name in member data

        def __getitem__(self, index):
            return a _rec object for this eventsId, field and index

        def __setitem__(self,key,val):
            # raise unimplemented exception

        def __delitem__(self, key):
            # raise unimplemented exception

        def __len__(self):
            # get the event list from the global event dict with this id
            # return length of event list

        def __eq__(self, value):
            # construct a new eventID based on the calling context
            # if if this eventID exist in global event dict
                # return those events
            # get the event list from the global event dict with this id
            # create new event list with events that have this
            #   field matching the value
            # set new event list into global events dict
            # return a new _pattern for the new event list

        def __lt__(self, rhs):
        def __ge__(self, rhs):
        def __gt__(self, rhs):
        def __le__(self, rhs):
        def __ne__(self, rhs):
        def __eq__(self, rhs):
            return results from _binary_operator



        def __str__(self)
            # return a string with patternId, field Name, and then list of
            # field values



        NOTE:
        Code complexity is by design.
        A more OO design would present cleaner code.  but basic timing tests
        of branches inside loops revealed them to be measurable less efficient.
        virtual functions inside of loops would likely be very
        noticable.


        NOTE: temporal binning feature is tabled at this time,
                do not implement.

        def _binning_binary_operator_for_fields(lhsField, rhsField, tol,
        opFunc,
                opName):
            # see prototype binaryoperator.py

            # set returning events member data to empy list
            # if operator is lessThan
                # set member data number of passes to 2
                # set minRHS to None

            # for each required pass
                # create a iterator by merging the lhs and rhs using std merge
                #   function


                # set lastValue to value that marks it as unintialized
                # call start field
                # for each value in the merged iterator


                    # if last is un initialized or differnce between current
                    # and last value is greater than tol
                        # perform logic for next bin ...

                    # perform logic for current value
                        ...

                    # otherwise raise an error for unhandled operator case

            # return the returning event list

        def _binary_operator_for_fields(self, rhsField, opFunc,
                opName):

            # set returning list to empty list

            # if else statments for the binary operators
            # <, <=, >, >=

            # if operation is less than
                # set minRHS to None
                # for each value on RHS
                    # if minRHS is None or cur value is less than minRHS
                        # set minRHS to cur value

                # if minRHS is None return empty event list

                # for each value on LHS (self)
                    # if value is less than minRHS
                        # append event to returning list
            # else, next operator....

            # else if unknown binary operation raise error


        def _binary_operator(self, opFunc, opName, rhs):
            # begin constructing a new eventID based on the calling context
            # using the name of the lhs object and the operator

            # if rhs object is a primitive type
                # append its value to the constructing name
            # else if rhs is a _ field
                # append the name of the rhs
            # raise exception for unhandled type of rhs object

            # if if this eventID exist in global event dict
                # return those events

            # if rhs is primitive type

                # if else statments for the binary operators
                # <, <=, >, >=, ==

                # if binary operation with the primitive rhs is true
                    # iterate the values of this field
                        # append current record to returning events
                # else if next operator...

                # if unknown binary operation
                    # raise an error


            # otherwise if rhs is a field wrapper
                # call binary operator for field wrapper
                # set new event list to the results



            # set the new event list into the global dictionary
            # return a wrapper pattern for the new event list





    class _pattern:
        def __init__(self, eventsId, events)      
            # if a new list of events is input, store them in
            #   the global pool
            # set id in member data

        def __getitem__(self, fieldName):
            # return a new _field object from this
            #   eventId, and fieldName
            
            return fieldwrapper(self.name, key)

        def __setitem__(self,key,val):
            # raise unimplemented exception

        def __delitem__(self, key):
            # raise unimplemented exception

        def __len__(self):
            # get the event list from the global event dict with this id
            # return length of event list

        def __str__(self)
            # return a string containing  pattern id and list of events

Functions:

    def all_equal(iterator:
        # http://stackoverflow.com/questions/3844801/check-if-all-elements-in-a-list-are-identical
        # See prototype iteration.py
        # dereference values wrapped in _rec

    def join(predicate, *patterns):
        """Return all patterns that match the predicate"""
        # See prototype iteration.py
         
         
    def concurrent(*patterns):
        """return all patterns that occur at the same time"""
        
        # generate name based on execution context
        # if eventlist of generated name exists
        #   return previously generated event list

        # construct a new empty list of fields
        # itterate the patterns
            # call 'at' on the pattern, append to list of fields

        # join all of the field lists using an equality test

        # generate new event list only containing timestamps
        #   found during the join, iterate over the join results
            # get each _rec's index and eventsId
            # if event is not already in the list
            #   append the event to a returning list of events 


        # record new event list in event dict with this name
        # by returning a _pattern for the new list
          
    class _check_follows:
        """
        Object represents a functor.  In the class constructor the delta time
        ammount is passed.  In the class's check funciton is used as a
        callback for pairs of timestamps. 
        """
        def __init__(self, howlong):
            # set how long into member data

        def check(self, pair):
            """
            called to check each tuple created from the cartesian product of
            before and after events given to the follows function.  
            pair is a two element tuple (before record, after record). Returns
            True if second element occurs within howlong of the first element.
            """
            # set before record to next value of the iterator
            # set after record to next value of the iterator
            # set before and after to the value wraped in the record wrapper
            # return true if before is within howlong of after and is not zero
            #   otherwise return False 

    def follows(howlong, before, after):
        """
        Determine and return the events in after that occur within howlong of
        before.  This does not include events in before and after that occur
        at the same time.
        howlong : time delta
        before : pattern
        after: pattern
        """

        # generate a name for a new pattern like:
        #   follows( howlong, name of before patter, name of after pattern)
        
        # if events can be found with the generated name
            # return previously generated event list

        # get fields of before, after by calling at() method

        # create a _check_follows functor object
        #   initialize with howlong

        # use itertools iproduct on the fields, and pass them to an ifilter
        #   use _check_follows.check() for filter predicate

        # create an empty list for returning events
        # use returned iterator from ifilter, for each of the tuples remaining
        # in the filtered product
            # get the second (After) element of the tuple
            # get the index of the timestampRecord event
            # get the name of the events list
            # get the event in the named list at the specified index
            # if event is not already in the list
            #   append the event to a returning list of events 
                
        # return a new pattern wrapper with the generated name and the
        #   newly determined events


    def until(before, after);
        """
        Determine all of the events in before that occured prior to any event
        in after.  This includes an event in before that occurs at the same
        time as the first event in after
        """

        # generate a name for a new pattern like:
        #   until( name of before pattern, name of after pattern)
        
        # if events can be found with the generated name
            # return previously generated event list

        # get fields of before, after by calling at() method

        # iterate the after timestamp fields
            # find the earliest occuring time

        # create empty list for returning events

        # get the name of the before events list
        # iterate the before timestamp fields
            # if current timestamp if before or equal to earliest after
            #   timestamp
                # get the index of the timestampRecord event
                # get the event in the named list at the specified index
                # append the event to a returning list of events 

        # return a new pattern wrapper with the generated name and the
        #   newly determined events

    def at(pattern):
        # return timestamp field of the pattern

    def source(srcName,patName,patInstanceName=None):
        """
        Construct a pattern wrapper from the specified source
        """
        # use the global query spec
        # iterate the srcQueries
            # if matching (srcName, patName, and patInstanceName)
            # if None was supplied as one of the parameter, then there
            #   must only be one instance to choose, keyed by 'None'
            # get the global srcResults for that srcQueryID
            # return a new _pattern with the srcResults as the events

        # raise exception if mathing srcQuery not found

    def get_replacment_dict(querySpec):
        """
        return a dictionary mapping variable names to replacment values using
        the variable specs in the query spec
        """

        # create empty dictionary
        # for each variable spec in the query spec
            # set variable value at variable name in dictionary

        # return replacment dictionary

    def evaluate_query(patternSpec, querySpec, srcResults):
        """
        Semantically process the source results according to the pattern
        code.  Return the results.
        NOTE: This funciton is non rentrant.
            Do not call evaluate_query when this is on the callstack
        """

        # with a global lock
            # try to evaluate the query
                # set querySpec and srcResults (as eventDict) into global scope

                # create a variable replacment map from query spec
                # create Template based on pattern code
                # substitute variables in pattern code's template

                # evaluate the pattern code, returns a _pattern

                # get the returning events from the returned patten 

                # return result events
            # finally
                # remove querySpec and eventDict from globals scope


    def qand(lhs, rhs):
        """
        The Quilt and operator.  This
        intersects the rows of lhs that occur in the rows of rhs
        :param lhs: left hand side pattern
        :param rhs: right hand side pattern
        """

        # generate a name for a new pattern like:
        #   qand( name of before pattern, name of after pattern)

        # if events can be found with the generated name
            # return previously generated event list

        # create returning event list
        # Get lists of lhs and rhs events
        # itterate through list of lhs events
            #if lhs element is in rhs
                append to returning list

        # return a new pattern wrapper with the generated name and the
        #   newly determined events

    def qor(lhs, rhs):
        """
        The Quilt or operator.  This
        unions the rows of lhs that occur in the rows of rhs
        :param lhs: left hand side pattern
        :param rhs: right hand side pattern
        """

        # generate a name for a new pattern like:
        #   qor( name of before pattern, name of after pattern)

        # if events can be found with the generated name
            # return previously generated event list

        # Get lists of lhs and rhs events
        # create returning event list as copy of lhs
        # itterate through list of rhs events
            #if rhs element is not in returning list
                # append to returning list
        # sort returning list by at function (by timestamp)

        # return a new pattern wrapper with the generated name and the
        #   newly determined events


Notepad:








