quilt 0.1 development strategy
------------------------------

c1.Infrastructure
    Setup shells of Query Master, Source Master, and Source1

    Design
        Design testing framework
        Design initial deployment strategy
    
    Develop
        create shell applications
        create testing framework
        
    Test
        Execute basic operations ad hoc
        Run automated test suite
        

c2.Basic Source
    Provide 2-way communication between components, such that one
    simple datasource an be queried and answers can be returned
    
    Design
        Design workload managment such that it can be extended to condor in
            the future.
        Design initial version of data interchange formats, do not focus on
            the permenance of the descision, but focus on capability for this
            basic source
        Design schema sharing system
            The source will publish an event spec, and query spec to let the
            master know what the capabilities are
        Design tests of the functionality
	

    Develop
        Stand up in order of the least scaffolding.
        
        data structures for schema sharing
        
        data source adapter for simple source

        query agent for querying the source

        workload managment wrapper

    Test
        1. Single-source pattern (e.g., restatement to source)
        2. Null pattern (e.g., TRUE (producing whole database) or FALSE 
            (producing no events)) on small database

c3.Grammar
    Adopt a query language

    Design 
        Support simple parsing of pattern code
        Support verifying variables in pattern code correspond to sources
        Support multiple sources
    
    Implement
        Use prototype parser to implement new quilt_parse module
        Update QueryMaster to handle queries to multiple sources

    Test
        Add second grep based source to test configured environment

        Add new Test case file
            setup should define patterns:
                same source multiple times
                same source multiple times plus another source

            queries shall be run on these patterns and results checked

c4.Query
    Implement the before operator.  Filter pattern results with a basic
        temporal constraint.

    Design
        add new executable script, quilt_query.  Input will be a query id

        quilt_query will be responsible for retrieving source specs and
        filling them out.  This funcitonality is currently in the query
        master.  

        After all query Results are returned to quilt_query
            sourceResults are returned to the quilt_query
                inside the querySpec add a sourceResults field
                sourceResults are keyed to the sourcePattern (instance)
                    they came from

        at result appending time, determine if this is the last piece
            of data
        track list of active source queries in the query spec
        When list is empty we know the query is done.
        Send final results to the query master, and tell master it si complete

c5.Semantics
    Design

        This will resolive ISSUE009

        Capture sources mentioned in the query code
        Define objects for those sources
            bridges to source results
            implement the __getitem__ interface
                index to appropriate field in the results
        parser defines the until, concurrent, follows methods

        Sample:
        quilt_define -n reboot \
            follows(60,startup_srcq['timestamp'],shutdown_srcq['timestamp'])

        imagine we have one src pattern ('grep')
            which is grep $WORD /var/log/msgs

        we would map like this
        
        -m startup syslog grep WORD startup_srcq
        -m shutdown syslog grep WORD shutdown_srcq

        In this case startup/shutdown are "variables"
        startup_srcq, shutdown_srcq are "src qry instances"

        Assume this generated two source queries (to the same source)
        who ran and have returned their results to quilt_parse

        quiltParser._srcResults[srcQueryId] = 
            [{ 'timestamp' : '2013/01/01 01:01:01'
                'content'   : 'rsyslog has shutdown' },
            { 'timestamp' : '2013/01/02 01:01:01'
                'content'   : 'rsyslog has shutdown' },
            { 'timestamp' : '2013/01/03 01:01:01'
                'content'   : 'rsyslog has shutdown' },
            ...]


        Major Design Ideas done in 'protoeval.py' and 'protoparser.py'


    Implement

        Implement changes to quilt_parse
        Implement changes to query_master
        Regression testing
        Implement new testing sources/files
        Implement quilt_interpret
        Implement changes to quilt_query
            Implement enough functionality for each new testcase
            Implement a new test case
            testing

    Test

        Define two new sources, use grep, 
            default search variable is for .*
            one with
            christian_holidays, and one with
            secular_holidays.  Have them
            listed as numeric month then, holiday name,
            then major [t/f]

        Add semantic testcase
        add test, 'secular_holidays' variable 'newyears'
            assure one result is new years in january
        add test, 'at(christian_holidays) == 12' no variable
            assure one result is christmass

        add test, 'concurent(at(christian_holidays),
            at(secular_holidays)) '
            
            assure christmass and boxingfay, no new years
               
                
        add test, 'concurrent(at(christian_holidays),
            at( secular_holidays['major'] == 'True'))

            Assure no November, assure Ash Wed and Valentines,
            Assure no groundhog day

c6.WrapRecords

    Design
        See partial modifications to protoeval.py

    Implement
        Refactor to wrap records

    Test
        rerun existing tests

c7.Follows

    Design
        See partial modifications to protoeval.py

    Implement
        Implement the Follows Function

    Test
        Add a test, find which christian holidays follow a secular holiday
        within 1 month

cX.Language
    Theme: full quilt language support

    Design
        complete prototype protoeval, with new functions
        Utilize python itertools library

    Implement
        Translate prototype into actual codebase

    Test
        append semantics testcase with new tests
            find christian holidays that follow major secular holidays within
            3 months

            find secular holidays until a major christian holiday


            
        
        
cX.Testability
    Theme: Ensure testing fidelity and coverage

    DESIGN

    Design scheme for testing patterns, using rational from
        design decision for  (ISSUE007)

        Patterns added before, multiple tests run, patterns removed

        The goal is to have all tests in a file run against a set of
            patterns that only stay defined for the time it takes to run
            those tests.

        Prototype is needed to explore pyunit API and see if such
            functionality exists.  Currently it is known that setUp and
            tearDown methods are called before and after each test.

        So far pyunit API in (python 2.6) does not look like it directly
            supports this.  Early prototyping has not shown an easy way to
            get testcase class level cleanup code to run.  We don't want to
            do unneccessary work, particularly if this is fixed in a later
            version of pyunit.

        Possibly we should just improve the current hack for a class level
            initialization code, and just ignore the cleanup of the
            patterns


    Design test for pattern/source pattern defaults (ISSUE006)
        According to the rules in the requirements, implment
            automated test to ensure this functionality does not 
            regress.
        This functionality was verified by hand once in 0.1.c2 and
            it should work

    Design old testing hook in source Manager (ISSUE004)
        a "lastQuery" attribute is in the Source Manager and called
            from "basic_testcase".
        This was only present to ensure the call was happening
        This attribute should be removed and the calling test should be
            refactored to more betterly test the desired functionality

    Design Testability (new feature/refactoring) (ISSUE008)
        currently the test's scrape the stdoutput and search for
            strings of interest in each executable's output
        Upgrade this functionality so that it is more scalable and
            modifiable.
        Provide (an overridable) output formatter 
            Default formatter will be a balance between human and machine
                reability.
            Default formatter will output pretty print of python dictionary
                objects.
    
    IMPLEMENT

    Implement all of the designed functionality in c3 in the most logical
        order.  Logical order may become more apparent after completion of
        detailed design.  At this time logical order is thought to be:
   
    ISSUE007 : With the wdesign decsion made, more should be apparant
    ISSUE008 : Refactor all axisting tests with new output checking scheme
        Modify tests as well as outputting code
    ISSUE004 : Fix existing tests before improving testing infrastructure
    ISSUE006 : Implement the new test for unconvered functionality

    TEST

    We are improving the testing infrastructure, so all of this testing will
    basically be already setup, all we have to do is run it.  When possible
    We will use the iterative appraoch and test as functionality is delivered 


   


    

cX.Execution
    Execute query specified from Query Master on the Source Master

    Design
        formalize query format
        formalize result format

    Test
        3. Dual-source pattern without cross-reference (e.g. flow.sip=1.2.3.4 
            and dns.resolution=1.2.3.4)
            dns.resolution=flow.dip)
        4. Dual-source pattern with cross-reference (e.g., flow.sip=1.2.3.4 and
        5. Multiple source pattern without cross-reference
        6. Multiple source pattern with cross reference
cX.Return
    Return query results from Source Master to Query Master

cX.Evaluation
    Determine and fix weak points and refactor
    Demo Prototype to likely adopting staeholders and gather reactions

cX.UI
    Polish user interaction points

cX.Integration
    Perform integration of entire workflow, fill in TODO's
