quilt 0.1 functional specification
----------------------------------

Quilt is a system that consists of three phases: retreival, reasoning, and
resolution. The retrieval phase provides for a pattern-driven distributed
query across multiple data types. The reasoning phase filters query results
using an abductive logic filter to determine complete and meaningfully partial
matches between the results and the original pattern. The resolution phase
permits further exploration of the results via analytics, including (but not
restricted to) summation, time-series, and contingency-table. 

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

Query Master
------------

    quilt_qmd
        start       # start the daemon
        stop        # stop the daemon
        status      # print status of the daemon
        restart     # stop then start the daemon

        The Query master daemon will run in the background and support the
        statefullness of the system.  It will listen for user queries and
        support returning the results to the user.  It does the coordination

    quilt_submit
        PATTERN     # name of the pattern to create the query from
        [-e EMAIL]  # comma seperated list of emails to supply notifications
        [-y]        # whether to automatically confirm the query
        [-l LEVEL]  # log level (DEBUG,INFO,WARN,ERROR), default is WARN
        [-v VARIABLE VALUE] ...   # Arguments used to provide values to the
                                  # variables in a pattern

        Quilt Submit will allow submission of a query.  It will communicate with
        the query master, recieve estimated time/space metrics of the query,
        get user confirmation (if no -y), then deliver the query, to the master
        for processing, print the query id, and then exit.

        A user may select a pattern and then substitute the VARIABLEs 
        defined in the pattern with the submitted values

    quilt_q
        [QUERY_ID]     # optional argument, which query to check
        [-l LEVEL]  # log level (DEBUG,INFO,WARN,ERROR), default is WARN

        Quilt queue will display information about queries in the queue.  If ID
        is specified, only that query's information will be displayed.  the 
        Query's information will describe the variables used in definition,
        the state of the query, if that id is not present nothing is displayed

    quilt_history
        [QUERY_ID]     # optional argument, which query to check
        [-l LEVEL]  # log level (DEBUG,INFO,WARN,ERROR), default is WARN

        Quilt history will display information about completed queries.  If ID
        is provided, the Query's information will describe the variables used 
        it its definition, the state of the query, and any results that are
        available.  If there are no completed queries with the specified ID 
        present, An error occurs.


    quilt_status

        NOTE: As of 0.1 c2 (basicSrc) version the pattern and source flags
            defined below are not supported, all information is displayed

        [-p [PATTERN_NAME]]       # display the catalog of query master
                                  # patterns, or if name is provided, display
                                  # the details of a particular pattern
        [-s [SOURCE_NAME]]        # display the catalog of data sources, or if
                                  # name is provided display the details of
                                  # a particular data souce
                                            
        [-l LEVEL]  # log level (DEBUG,INFO,WARN,ERROR), default is WARN
        
        Display information about the quilt system, including registered
        source managers, or defined patterns.  Detailed information about
        how the object was defined is provided if a valid name is provided

        If no flags are provided a summary of all objects is displayed

        
    quilt_define
        [PATTERN]           # the code for the pattern
        [-n NAME]           # suggested name of the pattern
        [-v VARIABLE [DESCRIPTION [DEFAULT]]] ...    # the variable(s) that 
                                          # are part of the pattern, 
                                          # and a text description
                                          # of the purpose of the variable
                                          # and the default of the variable
        [-m VARIABLE SOURCE SOURCE_PATTERN SOURCE_VARIABLE] ...    
                                                    # provide mapping from a 
                                                    # pattern variable to a 
                                                    # source variable
                                          
        
        Define a pattern to the query master.  A pattern is the template for a
        query.  If specified the name of the pattern may be modified so as to
        become unique.  The official name of the pattern will be displayed.

        quilt_define will not return until pattern is defined or an error has
        occured.  It will output the finalized (unique) name for the pattern

        NOTE:
            In a version coming to you soon, the pattern will support a quilt
            expression
        

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

Source Manager
--------------
    
    quilt_smd
        start       # start the daemon
        stop        # stop the daemon
        status      # print status of the daemon
        restart     # stop then start the daemon

        The source manager daemon holds the statefull information needed to
        manage the query source.  I will listen for requests from the query 
        master and return query results to it.
 
    quilt_source_query
        conditions  # the conditions of the query

        quilt_source_query will be invoked by the source manager daemon when a
        query is requested.  The conditions of the query are used to filter
        the data source, and results are returned to the query master

    
