quilt 0.1 Query Master design
-----------------------------

Module: query_master

Type: library

Internal Dependencies:
    quilt_core
    
External Dependenies:
    python-pyro(4)
    python-daemon
    threading

Prototypes:
    nested.py

Responsibilities:
    provide QueryMaster remote api 

Classes:

    class QueryMaster 

        
        
        # create a lock for this class, coarse grained but
        # proably good enough.
        self._lock = threading.lock()

        # Register a client with the query master
        string RegisterClient(   # return key name for the client
            string nameServerHost,      # ip address of nameserver
            int nameServerPort,         # port for the nameserver
            string clientName           # name of the source manager on
                                        # the specified nameserver
            string clientType           # nae of the type of the client
            )
            # acquire lock
            # determine unique name for source master (hopefuly just using the
            # passed in name, but double check registered list.
            # Store in list of registered clients
            # use object's name and type to key it in the registerd list
            # return the determined name

            Notes:
               The returned name should be stored by client so that it knows how
               itself is known to the QMD

                Previously was attempting to call back to client in here, this
                wasnot a good idea.  First of all it doesn't work, possibly
                because calling pyro daemon was not given enough sleep to get
                into the listening state.  Even if that was resolved, our
                current locking strategy is at the funciton level.  We do not
                want to call out of the function with the lock on!
             
        # UnRegister a client with the query master
        void UnRegisterClient(
            string clientType               # client type
            string clientNameKey            # key that the qwmd knows ro
                                            #   recognize a client
        )
            # acquire lock
            # remove the specified sm from registered list
            # if not found in the list, do nothing

        string Query(                       # return the ID of the query
            string submitterNameKey         # key that the submitter recieved
                                            #   when it was registered with this
                                            #   master
            dict querySpec                  # the details of the query
        )
            # try the following 

            # acquire lock
                # copy the patternSpec the query references
                # generate a query id
                # get copy of sources 

            # expand the pattern using query variables            
            
            # create proxy to the submitter
            # call submitter's validate function, pass num sources, and
            #   expanded pattern
            
            # if submitter refuses to validate, return early

            # acquire lock
                # store query and notificationAddress in a member dict
                #   as querySpec keyed by query id
                #   store pattern name in querySpec
                #   store state as Initial

            # Process query...

            # iterate the source master's that were identified. 
                # Get the source patterns from source proxy
                # Itterate the source patterns
                    # create blank sourceQuerySpec
                    #   set sourcePattern name

                    # get the sourcePatternSpec from source proxy
                    # get the variables from the sourcePatternSpec
                    # Itterate source pattern variables
                        # get the mapped pattern variable corresponding to the
                        #   sourcePattern varible
                        
                        # perform subsitution, set the value of the variable
                        #   from the query spec into the sourceQuery spec,
                        #   using the name of the sourcePattern variable that
                        #   maps to the name of the PAttern Variable

                        # This part is confusing, but we are basically just
                        # doing a double substitution and mapping some
                        # variable names

                    # send the completed sourceQuerySpec to the source using
                    #   asyncronous call
                        
                     
                

        
            #catch exception! 
                # submit launched this call asyncronysly and must be made
                # aware of the unexpected error
                # call submit's OnSubmitProblem



        # format a string with information about all the Query's in the q
        string GetQueryQueueStats()
            # acquire lock

        # format a string with information abour the specified query
        string TryGetQueryStats(
            string queryID          # the query we are interested in
        )
            # acquire lock
            # return None if query not foud, otherwise return the 
            #   query's record

        # format a string with information about all source managers
        string GetSourceManagerStats(
            # describe all of the source managers, and return as string 
        )
            # acquire lock

        # return the list of reistered object names
        string[] GetClients(        #return list of names
            type                            #type id of object's class
            # acquire lock

        dict{} GetClientRec(        # return a client record
            objType                     # the tupe id of the client
            clientName                  # the client's name key
        )
            # acquire lock, return copy of record from _clients
            
        string DefinePattern(
            dict    patternSpec)    # pattern specification dictionary
            """Define the specified pattern in the query master, return
            the finalized (unique) name of the pattern"""

            # Acquire lock
            # determine unique name for the pattern based off suggested name
            #   in the spec

            # store pattern spec in the member data

            # return the unique name for the pattern

        string GetPatternStats()
            """Return a string describing the patterns defined in the query
            master"""
            
            # Acquire lock
            # return stats
            
        
        void SetQueryResults(
            string queryId,
            eventList)
            """Append the specified eventList to the specified queryId"""

            # mark the query as completed in state
            # set the results into the query spec
            
            

Functions:

    Querymaster helper functions for server side only.  These will not
    be called by clients, only by the query master object"

    def get_client_proxy( clientRec)
        """
        return a pyro proxy object to the specified client

        clientRec       the dictionary of record 
                        for a client
        """

        # use pyro nameserver specified in record
        # use objects 'local name' clientName to get 
        # reference to proxy, return it

    def get_client_proxy_from_type_and_name(qm, clientType, name)
        # overload for get_client_proxy
