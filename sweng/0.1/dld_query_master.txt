quilt 0.1 Query Master design
-----------------------------

Module: query_master

Type: library

Internal Dependencies:
    quilt_core
    
External Dependenies:
    python-pyro(4)
    threading
    subprocess

Prototypes:
    nested.py

Responsibilities:
    provide QueryMaster remote api 

Classes:

    class QueryMaster 

        
        
        # create a lock for this class, coarse grained but
        # proably good enough.
        self._lock = threading.lock()

        # Register a client with the query master
        string RegisterClient(   # return key name for the client
            string nameServerHost,      # ip address of nameserver
            int nameServerPort,         # port for the nameserver
            string clientName           # name of the source manager on
                                        # the specified nameserver
            string clientType           # name of the type of the client
            )
            # acquire lock
            # determine unique name for source master (hopefuly just using the
            # passed in name, but double check registered list.
            # Store in list of registered clients
            # use object's name and type to key it in the registerd list
            # return the determined name

            Notes:
               The returned name should be stored by client so that it knows how
               itself is known to the QMD

                Previously was attempting to call back to client in here, this
                wasnot a good idea.  First of all it doesn't work, possibly
                because calling pyro daemon was not given enough sleep to get
                into the listening state.  Even if that was resolved, our
                current locking strategy is at the funciton level.  We do not
                want to call out of the function with the lock on!
             
        # UnRegister a client with the query master
        void UnRegisterClient(
            string clientType               # client type
            string clientNameKey            # key that the qwmd knows ro
                                            #   recognize a client
        )
            # acquire lock
            # remove the specified sm from registered list
            # if not found in the list, do nothing

        string Query(                       # return the ID of the query
            string submitterNameKey         # key that the submitter recieved
                                            #   when it was registered with this
                                            #   master
            dict querySpec                  # the details of the query
                                            #   necessary from the user
        )
            # try the following 

            # acquire lock
                # copy the patternSpec the query references
                # generate a query id
                # store querySpec in Q to reserve query id

            # if pattern code specified
            #   parse the pattern text, and get set of variables mentioned
            #   in the pattern code

            # using the set of sources described in the query code if
            #   they exist, or the ones described by mappings otherwise
            # group variable mapping's by target source and isource pattern
            #   store in local collection, if mentioned in the pattern code
            #   map{source:
            #       map{sourcePattern:
            #           map{sourcePatternInstance:
            #               map{srcVar:Var}}}}

            # ensure that all variables mentioned in the pattern code have
            #   corresponding variables in the query
        
            # iterate the collection of grouped sources
                # use variable mapping's source name to get proxy to 
                #   that source manager

                # iterate the collection of sourcePatterns for current source
                    # fill the a new src query specs from src patterns and
                    #   variable information from the query
                    #   by calling create_src_query_specs
                    # append completed sourceQuerySpecs to list of srcQueries
                    #   name sourceQuerySpec uniquely by combining the query
                    #   name with the source pattern name

                    
            # store sourceQueries in the querySpec
            # use querySpec to create a validation  string                    
            # ask submitter to validate the query/source Queries
            # if submitter refuses to validate, 
                # acuire lock remove query id from q
                # return early

            # acquire lock
                #   store querySpec state as INITIALIZED, and place 
                    # validated contnts in member data

            # Process query
            # get the path to the current directory
            # formulate the command line for quilt_query
            # use subprocess module to fork off the process

            # script, pass the query ID


            #catch exception! 
                # submit launched this call asyncronysly and must be made
                # aware of the unexpected error
                # call submit's OnSubmitProblem
                # acquire lock, remove query id from pool
                # add query to history with an error state



        # format a string with information about all the Query's in the q
        string GetQueryQueueStats()
            # acquire lock

        # format a string with information abour the specified query
        string TryGetQueryStats(
            string queryID          # the query we are interested in
        )
            # acquire lock
            # return None if query not foud, otherwise return the 
            #   query's record

        # format a string with information about all source managers
        string GetSourceManagerStats(
            # describe all of the source managers, and return as string 
        )
            # acquire lock

        # return the list of reistered object names
        string[] GetClients(        #return list of names
            type                            #type id of object's class
            # acquire lock

        dict{} GetClientRec(        # return a client record
            objType                     # the tupe id of the client
            clientName                  # the client's name key
        )
            # acquire lock, return copy of record from _clients
            
        string DefinePattern(
            dict    patternSpec)    # pattern specification dictionary
            """Define the specified pattern in the query master, return
            the finalized (unique) name of the pattern"""

            # Acquire lock
            # determine unique name for the pattern based off suggested name
            #   in the spec

            # store pattern spec in the member data

            # return the unique name for the pattern

        string GetPatternStats()
            """Return a string describing the patterns defined in the query
            master"""
            
            # Acquire lock
            # return stats
            
        
        void AppendQueryResults(
            string queryId,
            results)
            """Append the specified results to the specified queryId"""

            NOTE: No reason to really lock here because each source will be
                writing to one designated field, but it is probably 
                just a safe idea to lock in case of API misuse
            # acquire lock
                # Get query from Q
                # Try to get any existing results then
                #   append the results into the query spec


            
        void OnQueryError(
            queryid, Exception)
            """Called when an asyncronys query produces an exeption"""

            # log the execption 
            # remove query from q and place in history with error state
            # multiple source errors can trigger this, so it is reasonable to 
            # expect multiple calls

        # format a string with information about the specified query
        # from the history, or provide stats for all if no queryID is 
        # specified
        string GetQueryHistoryStats(
            string queryID          # the query we are interested in
        )
            # acquire lock
            # if queryID specified
            #   throw error if query not found in history, otherwise return the 
            #   query's record
            # else
            #   return complete history summary

        querySpec BeginQuery(
            string queryId          # the query we are interested in
            """
            Called by quilt_query to Move a query into the an active state,
            and return a copy of the query
            """

            # lock self
                # get the query from the Q
                # if can't get it rasie exception

                # if query state is not expected INITIALIZED state
                    # raise exception

                # move query to ACTIVE state
                # create a  copy of the query
 
            # returning copy because we con't want to stay locked when asking
            #   pyro to marshall across process bounds
            # return the query spec copy

        void CompleteQuery(queryId)
            """
            Called by quilt_query upon completion of all source queries
            """

            # lock self
                # delete the query from the Q
                # set the state to COMPLETED
                # Add the query to the history

Functions:

    Querymaster helper functions for server side only.  These will not
    be called by clients, only by the query master object"

    def get_client_proxy( clientRec)
        """
        return a pyro proxy object to the specified client

        clientRec       the dictionary of record 
                        for a client
        """

        # use pyro nameserver specified in record
        # use objects 'local name' clientName to get 
        # reference to proxy, return it

    def get_client_proxy_from_type_and_name(qm, clientType, name)
        # overload for get_client_proxy

    def create_src_query_specs
        # get new sourceQuery specs from the sourcePatternSpec
        
        # iterate the number of source queries in the list
        #   srcPatDict[source][patternName]
        # call create_src_query_spec with  the current pattern
        
    def create_src_query_spec
        # get new sourceQuery spec from the sourcePatternSpec 

        # iterate the variables in the new sourceQuerySpec
            # find that source variable in the pattern's mappings 
            # get the name of the query variable that maps to it
            # get the value of the query variable from the
            #   querySpec
            # assign the sourceVariable's value to that value
            #   but if the query does not have a value, use a
            #   default provided by the pattern, but if that has
            #   no default, use default provided by source pattern
        # return new src_query from name, patternName, and variables
        #   described in src pattern
