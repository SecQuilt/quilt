quilt 0.1 test design
---------------------

Module: quilt_test

Type: Executable Script 

Internal Dependencies:
    quilt_core
    quilt_test_core

External Dependenies:
    python-pyro(4)
    python=argparse

Prototpe:
    testd
    seiscripts/tests/run_all_tests


Responsibilities:
    Provide an Integration Testing Framework.  

Global:

Classes:

class QuiltTest 


    def Main(args)
        
        # Repeat Forever
            # Read quilt config (should be quilt test config)
            # access value "testing", "includes"
            # iterate each file in the test globs
                # skip file if it does not match includes
                # load unit tests from those files
            # run the tests
            # if any test fails throw exception
            # read sleep value between tests
            # if sleep value is less than or equal zero exit script
            # sleep before repeating
        
Functions:

        
Schema:
    # Provide configuration dir which sets up one local  registrar.  Then sets
up an smd, for testing
qmd, that use it

quilt.conf
[query_master]
name : 'test'

smd.d/syslog.conf
[syslog]

# command will output event spec in object parseable string format
# prototype: see tojson.sh, tojson.py, cfgproto.py
# see QUILT_HOME/test/etc/quilt/smd.d/syslog.conf


[multipattern]
# make two patterns similar to QUILT_HOME/test/etc/quilt/smd.d/syslog.conf
# but in one source
# named pat1, pat1srcvar and pat2, pat2srcvar



Scripts:
    Prototpe:
        get_script_path.sh

    Purpose:
        Setup/teardown testing scaffold and run tests

        test_start
            # set python path for modules under test and test modules
            # set config dir to test config
            # call test stop, capture all the output
            # start registrar
            # start qmd
            # start smd
            # run quilt_Test
            # return same error code as quilt_test

        test_stop
            # kill quilt_test process
            # stop daemons in opposite order as start

        timed_test
            # TODO to automate testing need to make sure test does not run
            # forever, so wrap it in some way that will cause the test to 
            # fail if it is taking too long
